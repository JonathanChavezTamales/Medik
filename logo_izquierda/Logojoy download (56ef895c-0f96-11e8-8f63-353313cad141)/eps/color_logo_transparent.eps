%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2349 777
%%HiResBoundingBox: 0 0 2349 777
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2349 777 re
W
q
[1 0 0 -1 0 777] cm
q
0 0 2349 776.26935 re
W*
q
[0.747851 0 0 0.747851 0 -776.26935] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3141 2081 re
f
Q
Q
q
5.982808 0 2343.0171 774.02582 re
W*
q
[27.926159 0 0 27.91326 774.47345 -55.85424] cm
/DeviceRGB {} CS
[0.816 0.267 0.259] SC
/DeviceRGB {} cs
[0.816 0.267 0.259] sc
11.4 13.72 m
13.36 13.72 14.5 14.9602 14.5 17.260201 c
14.5 23.5002 l
14.5 23.8202 14.32 24.0002 14 24.0002 c
12 24.0002 l
11.68 24.0002 11.5 23.8202 11.5 23.5002 c
11.5 17.520201 l
11.5 16.720201 11.020001 16.480202 10.46 16.480202 c
9.86 16.480202 9.3 16.780201 9.3 17.760202 c
9.3 23.500202 l
9.3 23.820202 9.12 24.000202 8.8 24.000202 c
6.8 24.000202 l
6.48 24.000202 6.3 23.820202 6.3 23.500202 c
6.3 17.520203 l
6.3 16.720203 5.82 16.480202 5.26 16.480202 c
4.66 16.480202 4.1 16.780201 4.1 17.760202 c
4.1 23.500202 l
4.1 23.820202 3.92 24.000202 3.6 24.000202 c
1.6 24.000202 l
1.28 24.000202 1.1 23.820202 1.1 23.500202 c
1.1 14.500202 l
1.1 14.180203 1.28 14.000202 1.6 14.000202 c
3.6 14.000202 l
3.92 14.000202 4.1 14.180203 4.1 14.500202 c
4.1 14.908213 l
4.5584 14.216013 5.3552 13.720213 6.400001 13.720213 c
7.409801 13.720213 8.215401 14.128413 8.7188 14.910613 c
9.367001 14.217013 10.200001 13.720013 11.400001 13.720013 c
11.4 13.72 l
h
21.299999 13.72 m
24.219999 13.72 26.34 15.980001 26.34 19 c
26.34 19.26 26.32 19.5 26.299999 19.74 c
26.259998 20.059999 26.059999 20.199999 25.759998 20.199999 c
23.319998 20.199999 l
19.081198 20.199999 l
19.444597 21.388199 20.377798 21.859999 21.419998 21.859999 c
21.979998 21.859999 22.539999 21.659998 22.899998 21.359999 c
23.099998 21.199999 23.259998 21.099998 23.519999 21.099998 c
25.439999 21.079998 l
25.799999 21.079998 25.999998 21.319998 25.839998 21.639997 c
25.059998 23.379997 23.419998 24.279997 21.379997 24.279997 c
18.059998 24.279997 15.939997 21.979998 15.939997 18.999996 c
15.939997 16.019995 18.139997 13.719996 21.299997 13.719996 c
21.299999 13.72 l
h
19.0686 17.92 m
23.3536 17.92 l
23.044399 16.782 22.162199 16.380001 21.279999 16.380001 c
20.1556 16.380001 19.377598 16.922602 19.0686 17.920002 c
19.0686 17.92 l
h
37.759998 10 m
38.079998 10 38.259998 10.18 38.259998 10.5 c
38.259998 23.5 l
38.259998 23.82 38.079998 24 37.759998 24 c
35.759998 24 l
35.439999 24 35.259998 23.82 35.259998 23.5 c
35.259998 23.066 l
34.5914 23.8284 33.618397 24.280001 32.280197 24.280001 c
29.660198 24.280001 27.500198 21.980001 27.500198 19 c
27.500198 16.019999 29.660198 13.719999 32.280197 13.719999 c
33.618397 13.719999 34.591396 14.171599 35.259998 14.933999 c
35.259998 10.499999 l
35.259998 10.179999 35.439999 9.999999 35.759998 9.999999 c
37.759998 9.999999 l
37.759998 10 l
h
32.880001 21.440001 m
34.260002 21.440001 35.260002 20.5 35.260002 19 c
35.260002 17.5 34.260002 16.56 32.880001 16.56 c
31.5 16.56 30.5 17.5 30.5 19 c
30.5 20.5 31.5 21.440001 32.880001 21.440001 c
h
40.959999 12.8 m
40.639999 12.8 40.459999 12.62 40.459999 12.3 c
40.459999 10.5 l
40.459999 10.18 40.639999 10 40.959999 10 c
42.959999 10 l
43.279999 10 43.459999 10.18 43.459999 10.5 c
43.459999 12.3 l
43.459999 12.62 43.279999 12.8 42.959999 12.8 c
40.959999 12.8 l
h
40.959999 24 m
40.639999 24 40.459999 23.82 40.459999 23.5 c
40.459999 14.5 l
40.459999 14.18 40.639999 14 40.959999 14 c
42.959999 14 l
43.279999 14 43.459999 14.18 43.459999 14.5 c
43.459999 23.5 l
43.459999 23.82 43.279999 24 42.959999 24 c
40.959999 24 l
h
54.619999 23.4 m
54.860001 23.74 54.719997 24 54.32 24 c
52.040001 24 l
51.780003 24 51.580002 23.9 51.440002 23.68 c
48.660004 19.614201 l
48.660004 23.5 l
48.660004 23.82 48.480003 24 48.160004 24 c
46.160004 24 l
45.840004 24 45.660004 23.82 45.660004 23.5 c
45.660004 10.5 l
45.660004 10.18 45.840004 10 46.160004 10 c
48.160004 10 l
48.480003 10 48.660004 10.18 48.660004 10.5 c
48.660004 18.344799 l
51.240005 14.32 l
51.380005 14.099999 51.580006 14 51.840004 14 c
54.140003 14 l
54.540005 14 54.680004 14.26 54.460003 14.6 c
51.520004 19 l
54.619999 23.4 l
h
f
Q
q
[6.405992 0 0 6.403032 125.375244 119.33728] cm
/DeviceRGB {} CS
[0.816 0.267 0.259] SC
/DeviceRGB {} cs
[0.816 0.267 0.259] sc
87.421997 23.76 m
71.239998 23.76 l
71.239998 7.577 l
71.239998 3.804 68.171997 0.735 64.397995 0.735 c
30.601999 0.735 l
26.828999 0.735 23.759998 3.804 23.759998 7.577 c
23.759998 23.76 l
7.577 23.76 l
3.804 23.76 0.735 26.829 0.735 30.602001 c
0.735 64.398003 l
0.735 68.171005 3.804 71.240005 7.577 71.240005 c
23.76 71.240005 l
23.76 87.422005 l
23.76 91.195007 26.829 94.266006 30.602001 94.266006 c
64.398003 94.266006 l
68.171005 94.266006 71.240005 91.196007 71.240005 87.422005 c
71.240005 71.239998 l
87.422005 71.239998 l
91.195007 71.239998 94.266006 68.171997 94.266006 64.397995 c
94.266006 30.601999 l
94.265999 26.829 91.195 23.76 87.421997 23.76 c
h
26.622999 7.577 m
26.622999 5.383 28.407999 3.598 30.601999 3.598 c
64.398003 3.598 l
66.591003 3.598 68.376999 5.383 68.376999 7.577 c
68.376999 23.76 l
26.622999 23.76 l
26.622999 7.577 l
h
68.376999 26.622999 m
68.376999 68.376999 l
26.622999 68.376999 l
26.622999 26.622999 l
68.376999 26.622999 l
h
7.577 68.376999 m
5.383 68.376999 3.598 66.591995 3.598 64.397995 c
3.598 30.601999 l
3.598 28.407999 5.383 26.622999 7.577 26.622999 c
23.76 26.622999 l
23.76 68.376999 l
7.577 68.376999 l
h
68.376999 87.421997 m
68.376999 89.616997 66.591995 91.402 64.397995 91.402 c
30.601999 91.402 l
28.407999 91.402 26.622999 89.616997 26.622999 87.421997 c
26.622999 71.239998 l
68.376999 71.239998 l
68.376999 87.421997 l
h
91.402 64.398003 m
91.402 66.591003 89.616997 68.376999 87.421997 68.376999 c
71.239998 68.376999 l
71.239998 26.622999 l
87.421997 26.622999 l
89.616997 26.622999 91.402 28.407999 91.402 30.601999 c
91.402 64.398003 l
h
f
35.480999 49.493999 m
46.481998 60.507999 l
46.75 60.778 47.113998 60.927998 47.493999 60.927998 c
47.873001 60.927998 48.237 60.777996 48.507 60.509998 c
59.522999 49.493999 l
59.556 49.460999 59.586998 49.425999 59.617001 49.389999 c
60.986 47.905998 61.737999 45.987 61.737999 43.975998 c
61.737999 39.566998 58.149998 35.98 53.742001 35.98 c
51.256001 35.98 48.984001 37.118 47.5 38.977001 c
46.015999 37.118 43.743999 35.98 41.256001 35.98 c
36.847 35.98 33.261002 39.567001 33.261002 43.975998 c
33.261002 46.021999 34.040001 47.972 35.480999 49.493999 c
h
41.256001 38.844002 m
43.487999 38.844002 45.450001 40.271004 46.138 42.396004 c
46.329002 42.986004 46.879002 43.387005 47.5 43.387005 c
48.120998 43.387005 48.669998 42.987003 48.861 42.396004 c
49.549 40.271004 51.511002 38.844002 53.742001 38.844002 c
56.571999 38.844002 58.875 41.147003 58.875 43.977001 c
58.875 45.288002 58.375 46.539001 57.466999 47.499001 c
57.454998 47.511002 57.445999 47.522999 57.433998 47.535 c
47.495998 57.472 l
37.533997 47.499001 l
36.624996 46.539001 36.124996 45.288002 36.124996 43.978001 c
36.125 41.146 38.426998 38.844002 41.256001 38.844002 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
